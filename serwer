import { log } from 'console';

const WebSocket = require('ws');
const fs = require('fs')
const path = require('path');

const server = new WebSocket.Server({ port: 8080 });
let turtleObjects = {};
const WorldMap = {};
let PCs = [];
const computercraftDirectory = './computercraft';

if (fs.existsSync('WorldMap.json')) {
    try {
        const data = fs.readFileSync('WorldMap.json', 'utf8');
        Object.assign(WorldMap, JSON.parse(data));
    } catch (error) {
        console.error('Error reading WorldMap.json:', error);
    }
}

function findTurtleLogs(directory) {
    let newTurtleObjects = {};

    const files = fs.readdirSync(directory, { withFileTypes: true });

    files.forEach(file => {
        const fullPath = path.join(directory, file.name);

        if (file.isDirectory()) {
            Object.assign(newTurtleObjects, findTurtleLogs(fullPath));
        } else if (file.name.startsWith('TurtleLog')) {
            try {
                const fileContent = fs.readFileSync(fullPath, 'utf8');
                Object.assign(newTurtleObjects, JSON.parse(fileContent));
            } catch (err) {
                console.error(`Failed to parse ${fullPath}:`, err.message);
            }
        }
    });

    return newTurtleObjects;
}

server.on('connection', socket => {
    console.log('New connection established');
    socket.send('PC?');

    socket.on('message', data => {
        let message = JSON.parse(data);

        if (message.type === 'PassThrough') {
            for (const turtle in turtleObjects) {
                if (turtleObjects[turtle].id === message.receiver) {
                    message.type = message.newHeader || 'PassThrough'; // Use the new header if provided, otherwise default to 'PassThrough'
                    delete message.newHeader; // Clean up the message to avoid confusion
                    socket.send(JSON.stringify(message));

                    break;
                }
            }
        }

        if (message.type === 'MapUpdate') {
            const detected = message.payload;
            let change = false;

            for (const vectorKey in detected) {
                const inspectVariables = detected[vectorKey];
            
                if (inspectVariables.blocked && !WorldMap[vectorKey]) {
                    WorldMap[vectorKey] = inspectVariables.data;
                    change = true;
                } else if (!inspectVariables.blocked && WorldMap[vectorKey]) {
                    delete WorldMap[vectorKey];
                    change = true;
                }
            }

            if (change) {
                fs.writeFileSync('WorldMap.json', JSON.stringify(WorldMap, null, 2));
            }
        }

        if (message.type === 'MapRequest') {
          socket.send(JSON.stringify(WorldMap));
        }

        if (message.type === 'PCConfirm') {
            PCs.push(socket);
        }

        if (message.type === 'TurtleBorn') {
            const turtleObject = {socket: socket, ...message.payload};
            socket.send(JSON.stringify({type: 'Completion2', payload: turtleObject}));
        }

        if (message.type === 'Journey') {
            const journeyPath = message.payload.journeyPath;
            const turtleID = message.payload.turtleID;

            for (const step of journeyPath) {
                if (!WorldMap[step.vector]) {
                    WorldMap[step.vector] = step;
                    continue;
                }

                if (!WorldMap[step.vector].turtles.includes(turtleID)) {
                    WorldMap[step.vector].turtles.push(turtleID);
                }
            }

            fs.writeFileSync('WorldMap.json', JSON.stringify(WorldMap, null, 2));
        }


        if (message.type === 'Journeys End') {
            const journeyPath = message.payload.journeyPath;
            const turtleID = message.payload.turtleID;

            for (const step of journeyPath) {
                const key = step.vector;

                if (!WorldMap[key]) {
                    continue; // Skip if the key does not exist
                }

                WorldMap[key].turtles = WorldMap[key].turtles.filter(id => id !== turtleID); // Remove the turtle ID from the list
                if (WorldMap[key].turtles.length > 0) {
                    continue; // If there are still turtles, keep the key
                }

                delete WorldMap[key].turtles;
            }

            fs.writeFileSync('WorldMap.json', JSON.stringify(WorldMap, null, 2));
        }

        if (message.type === 'TurtleScan') {
            turtleObjects = findTurtleLogs(computercraftDirectory);
            const message = {
                type: 'TurtleScanResult',
                payload: turtleObjects
            };

            socket.send(JSON.stringify(message));
        }
    });
    
    socket.on('close', () => {
        if (PCs.length === 0) {
            return;
        }

        console.log('Turtle disconnected');

        const message = {
            type: 'TurtleDisconnect',
            payload: Object.keys(turtleObjects).find(id => turtleObjects[id].socket === socket)
        };

        for (const pc of PCs) {
            pc.send(JSON.stringify(message));
        }
    });
});