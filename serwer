import { log } from 'console';

const WebSocket = require('ws');
const fs = require('fs')
const path = require('path');

const server = new WebSocket.Server({ port: 8080 });
const turtleObjects = {};
const obstacleMap = {};
let PCs = [];
const computercraftDirectory = './computercraft';

if (fs.existsSync('obstacleMap.json')) {
    try {
        const data = fs.readFileSync('obstacleMap.json', 'utf8');
        Object.assign(obstacleMap, JSON.parse(data));
    } catch (error) {
        console.error('Error reading obstacleMap.json:', error);
    }
}

function findTurtleLogs(directory) {
    let newTurtleObjects = {};

    const files = fs.readdirSync(directory, { withFileTypes: true });

    files.forEach(file => {
        const fullPath = path.join(directory, file.name);

        if (file.isDirectory()) {
            Object.assign(newTurtleObjects, findTurtleLogs(fullPath));
        } else if (file.name.startsWith('TurtleLog')) {
            try {
                const fileContent = fs.readFileSync(fullPath, 'utf8');
                Object.assign(newTurtleObjects, JSON.parse(fileContent));
            } catch (err) {
                console.error(`Failed to parse ${fullPath}:`, err.message);
            }
        }
    });

    return newTurtleObjects;
}

server.on('connection', socket => {
    console.log('New connection established');
    socket.send('PC?');

    socket.on('message', data => {
        let message = JSON.parse(data);

        if (message.type === 'MapUpdate') {
            const detected = message.payload;
            let change = false;

            for (const vectorKey in detected) {
                const inspectVariables = detected[vectorKey];
            
                if (inspectVariables.blocked && !obstacleMap[vectorKey]) {
                    obstacleMap[vectorKey] = inspectVariables.data;
                    change = true;
                } else if (!inspectVariables.blocked && obstacleMap[vectorKey]) {
                    delete obstacleMap[vectorKey];
                    change = true;
                }
            }

            if (change) {
                fs.writeFileSync('obstacleMap.json', JSON.stringify(obstacleMap, null, 2));
            }
        }

        if (message.type === 'MapRequest') {
          socket.send(JSON.stringify(obstacleMap));
        }

        if (message.type === 'TurtleUpdate') {
            turtleObjects[message.payload.id] = message.payload;
        }

        // if (message.type === 'TurtleBorn') {
        //     const turtleObject = {socket: socket, ...message.payload};
        //     const message = {
        //         type: 'Completion2',
        //         payload: turtleObject
        //     };
        // 
        //     socket.send(JSON.stringify(message));
        //     turtleObjects[message.payload.id] = turtleObject;
        // }

        if (message === 'PCConfirm') {
            PCs.push(socket);
        }

        if (message.type === 'Journey') {
            const JourneyPath = message.payload;
            obstacleMap = {...obstacleMap, ...JourneyPath};
        }

        if (message.type === 'Journeys end') {
            const JourneyPath = message.payload;
            for (const key in JourneyPath) {
                delete obstacleMap[key];
            }
        }

        if (message.type === 'TurtleScan') {
            turtleObjects = findTurtleLogs(computercraftDirectory);
            const message = {
                type: 'TurtleScanResult',
                payload: turtleObjects
            };

            socket.send(JSON.stringify(message));
        }
    });

    socket.on('close', () => {
        console.log('Turtle disconnected');
        const message = {
            type: 'TurtleDisconnect',
            payload: Object.keys(turtleObjects).find(id => turtleObjects[id].socket === socket)
        };

        mainPC.send(JSON.stringify(message));
    });
});